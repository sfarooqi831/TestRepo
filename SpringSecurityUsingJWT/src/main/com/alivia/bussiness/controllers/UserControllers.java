package com.alivia.bussiness.controllers;

import java.security.Principal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.alivia.bussiness.model.User;
import com.alivia.bussiness.model.UserRequest;
import com.alivia.bussiness.model.UserResponse;
import com.alivia.bussiness.service.UserService;
import com.alivia.bussiness.token.JWTUtils;

@RestController
@RequestMapping("/user")
public class UserControllers {

	
	@Autowired
	UserService service;

	@Autowired
	JWTUtils jwt;

	@Autowired
	ProviderManager authenticationManager;

	@PostMapping("/save")
	public ResponseEntity<String> saveUser(@RequestBody User user) {
		Integer id = service.saveUser(user);
		return ResponseEntity.ok(String.format("User Saved with id %s", id));
	}

	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody UserRequest user) {

		Authentication authenticate=null;
		try {
			System.out.println("****************** " + authenticationManager.getClass().getCanonicalName());
			 authenticate = authenticationManager
					.authenticate(new UsernamePasswordAuthenticationToken(user.getUserName(), user.getPassword()));
		} catch (BadCredentialsException e) {
			throw new BadCredentialsException("Invalid User Name or passowrd privoded");
		}

		if(authenticate.isAuthenticated()) {
		String token = jwt.generateToken(user.getUserName());
		UserResponse response = new UserResponse();
		response.setToken(token);
		response.setMessage("Token Generated Successfully....!!!");
		response.setTokenExpirationTime(
				String.format("Token is valid for %s minutes only", jwt.getExpiryMinutes(token)));
		response.setIssuer(String.format("Token is Generated By '%s'", jwt.getClaims(token).getIssuer()));
		return ResponseEntity.status(HttpStatus.CREATED).body(response);
		}
		return ResponseEntity.status(HttpStatus.NOT_ACCEPTABLE).body("Invalid");
	}

	@PostMapping("/welcome")
	public ResponseEntity<String> accessUserData(Principal p) {
		return ResponseEntity.ok("Hello user:" + p.getName() + ": " + p.getClass().getCanonicalName());
	}

	@PostMapping("/report")
	public ResponseEntity<String> viewRport(Principal p) {
		return ResponseEntity
				.ok("You can view the reports: " + p.getName().toUpperCase() + " please check and respond");
	}
}
